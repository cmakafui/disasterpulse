services:
  disasterpulse-datasync:
    container_name: disasterpulse-datasync
    build:
      context: ./datasync
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - RELIEFWEB_APP_NAME=${RELIEFWEB_APP_NAME}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@disasterpulse-db:5432/${POSTGRES_DB}
      - RELIEF_WEB_API_URL=${RELIEF_WEB_API_URL}
      - RETENTION_PERIOD_DAYS=${RETENTION_PERIOD_DAYS}
      - API_BASE_URL=${API_BASE_URL}
    restart: unless-stopped
    depends_on:
      disasterpulse-backend:
        condition: service_healthy
    networks:
      - proxy

  disasterpulse-backend:
    container_name: disasterpulse-backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - RELIEFWEB_APP_NAME=${RELIEFWEB_APP_NAME}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@disasterpulse-db:5432/${POSTGRES_DB}
      - RELIEF_WEB_API_URL=${RELIEF_WEB_API_URL}
      - RETENTION_PERIOD_DAYS=${RETENTION_PERIOD_DAYS}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    restart: unless-stopped
    depends_on:
      disasterpulse-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 2
      start_period: 10s
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.disasterpulse-backend.entrypoints=web"
      - "traefik.http.routers.disasterpulse-backend.rule=Host(`${DISASTERPULSE_API_DOMAIN}`)"
      - "traefik.http.middlewares.disasterpulse-backend-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.disasterpulse-backend.middlewares=disasterpulse-backend-https-redirect"
      # Secure Router setup
      - "traefik.http.routers.disasterpulse-backend-secure.entrypoints=web-secure"
      - "traefik.http.routers.disasterpulse-backend-secure.rule=Host(`${DISASTERPULSE_API_DOMAIN}`)"
      - "traefik.http.routers.disasterpulse-backend-secure.tls=true"
      - "traefik.http.routers.disasterpulse-backend-secure.service=disasterpulse-backend"
      - "traefik.http.routers.disasterpulse-backend-secure.middlewares=secHeaders@file, autodetectContenttype@file"
      - "traefik.http.services.disasterpulse-backend.loadbalancer.server.port=8000"

  disasterpulse-frontend:
    container_name: disasterpulse-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - TURSO_CONNECTION_URL=${TURSO_CONNECTION_URL}
      - TURSO_AUTH_TOKEN=${TURSO_AUTH_TOKEN}
      - NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}
      - CLERK_SECRET_KEY=${CLERK_SECRET_KEY}
      - NEXT_PUBLIC_CLERK_SIGN_IN_URL=${NEXT_PUBLIC_CLERK_SIGN_IN_URL}
      - NEXT_PUBLIC_CLERK_SIGN_UP_URL=${NEXT_PUBLIC_CLERK_SIGN_UP_URL}
      - API_BASE_URL=${API_BASE_URL}
      - NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=${NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}
    restart: unless-stopped
    depends_on:
      disasterpulse-backend:
        condition: service_healthy
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.disasterpulse-frontend.entrypoints=web"
      - "traefik.http.routers.disasterpulse-frontend.rule=Host(`${DISASTERPULSE_DOMAIN}`)"
      - "traefik.http.middlewares.disasterpulse-frontend-https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.routers.disasterpulse-frontend.middlewares=disasterpulse-frontend-https-redirect"
      # Secure Router setup
      - "traefik.http.routers.disasterpulse-frontend-secure.entrypoints=web-secure"
      - "traefik.http.routers.disasterpulse-frontend-secure.rule=Host(`${DISASTERPULSE_DOMAIN}`)"
      - "traefik.http.routers.disasterpulse-frontend-secure.tls=true"
      - "traefik.http.routers.disasterpulse-frontend-secure.service=disasterpulse-frontend"
      - "traefik.http.routers.disasterpulse-frontend-secure.middlewares=secHeaders@file, autodetectContenttype@file"
      - "traefik.http.services.disasterpulse-frontend.loadbalancer.server.port=3000"

  disasterpulse-db:
    container_name: disasterpulse-db
    image: postgres:16-alpine
    volumes:
      - disasterpulse_pg_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    restart: unless-stopped
    networks:
      - proxy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  disasterpulse_pg_data:
    name: disasterpulse_pg_data

networks:
  proxy:
    name: proxy
    external: true

x-dockge:
  urls:
    - https://${DISASTERPULSE_API_DOMAIN}
    - https://${DISASTERPULSE_DOMAIN}
